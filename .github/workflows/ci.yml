name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }} ${{ matrix.type.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      matrix:
        platform:
        - { name: Windows VS2022, os: windows-latest, flags: -G"Visual Studio 17 2022" }
        - { name: Windows Clang,  os: windows-latest, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -GNinja }
        - { name: Linux Clang,    os: ubuntu-latest,  flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -GNinja }
        - { name: Linux GCC,      os: ubuntu-latest,  flags: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -GNinja }

        config:
        - { name: Static, flags: -DBUILD_SHARED_LIBS=OFF }
        - { name: Shared, flags: -DBUILD_SHARED_LIBS=ON }

        type:
        - { name: Release, flags: -DCMAKE_BUILD_TYPE=Release }
        - { name: Debug,   flags: -DCMAKE_BUILD_TYPE=Debug }

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
           if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get update && sudo apt-get install ninja-build libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libgl1-mesa-dev
           else
              echo "$RUNNER_OS not supported"
              exit 1
           fi
      shell: bash

    - name: Configure
      run: cmake -S . -B build ${{ matrix.platform.flags }} ${{ matrix.config.flags }} ${{ matrix.type.flags }}

    - name: Build
      run: cmake --build build --config ${{ matrix.type.name }} --parallel

  clang-format-check:
    name: clang-format check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: sudo apt-get install clang-format-14

    - name: Format code
      run: cmake -P cmake/run_clang_format.cmake

    - name: Check formatting
      run: git diff --exit-code

  clang-tidy-check:
    name: clang-tidy check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install ninja-build libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libgl1-mesa-dev

    - name: Configure
      shell: bash
      run: cmake -S . -B build -G Ninja -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Prepare compile_commands.json
      shell: bash
      run: sed -i -E 's|(-I)([^ ]*third_party[^ ]*include\b)|-isystem \2|g' build/compile_commands.json

    - name: Analyse code
      shell: bash
      run: cmake -DPROJECT_BINARY_DIR=build -P cmake/run_clang_tidy.cmake
